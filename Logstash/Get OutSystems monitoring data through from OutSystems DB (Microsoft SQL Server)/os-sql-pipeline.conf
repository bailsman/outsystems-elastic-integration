input {
  jdbc {
    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            action_name         = CASE WHEN e.[Action_Name]='' THEN 'No Action' ELSE e.[Action_Name] END,
            application_key     = xa.[KEY],
            application_name = xa.[NAME],
            entrypoint_name     = e.[Entrypoint_Name],
            environment_info = e.[EnvironmentInformation],
            error_message     = e.[Message],
            espace_id         = e.[Espace_Id],
            espace_name         = xe.[NAME],
            full_stack_trace = '',
            id                 = e.[id],
            import_latency     = DATEDIFF(minute,e.[Instant],GETDATE()),
            instant             = e.[Instant],
            instant_unix        = DATEDIFF(SECOND,'1970-01-01', instant),
            module_name         = e.[Module_Name],
            request_key         = e.[Request_Key],
            server_name         = e.[Server],
            session_id         = e.[Session_Id],
            stack_trace         = e.[Stack],
            tenant_id         = e.[Tenant_Id],
            tenant_name         = t.NAME,
            user_id             = e.[User_Id]
        FROM [dbo].[oslog_Error] (nolock) e
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON e.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON e.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Error"
  }
}

input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            action_name      = e.[Action_Name],
            application_key  = xa.[KEY],
            application_name = xa.[NAME],
            instant          = e.[Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            duration         = e.[Duration],
            import_latency   = DATEDIFF(minute,e.[Instant],GETDATE()),
            session_id       = e.[Session_Id],
            user_id          = e.[User_Id],
            espace_id        = e.[Espace_Id],
            tenant_id        = e.[Tenant_Id],
            extension_id     = e.[Extension_Id],
            executed_by      = e.[Executed_By],
            error_id         = e.[Error_Id],
            request_key      = e.[Request_Key],
            espace_name      = xe.[NAME],
            tenant_name      = t.NAME,
            extension_name   = xex.[NAME]
        FROM [dbo].[oslog_Extension] (nolock) e
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON e.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON e.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
            LEFT JOIN [dbo].[ossys_Extension] (nolock) xex ON e.[Extension_Id]=xex.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Extension"
  }
}
input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            action_name      = [Action_Name],
            application_key  = xa.[KEY],
            application_name = xa.[NAME],
            client_ip        = [Client_IP],
            entrypoint_name  = [Entrypoint_Name],
            error_id         = [Error_Id],
            espace_id        = g.[Espace_Id],
            espace_name      = xe.[NAME],
            import_latency     = DATEDIFF(minute, g.[Instant],GETDATE()),
            instant          = [Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            message_text     = [Message],
            module_name      = [Module_Name],
            request_key      = [Request_Key],
            session_id       = [Session_Id],
            tenant_id        = g.[Tenant_Id],
            tenant_name      = t.NAME,
            user_id          = [User_Id]
        FROM [dbo].[oslog_General] (nolock) g
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON g.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON g.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "General"
  }
}
input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            action_name      = i.[Action],
            application_key  = xa.[KEY],
            application_name = xa.[NAME],
            detail_link      = d.[Detail],
            detail_label     = d.[DetailLabel],
            duration         = i.[Duration],
            endpoint_name    = i.[Endpoint],
            error_id         = i.[Error_Id],
            espace_id        = i.[Espace_Id],
            espace_name      = xe.[NAME],
            executed_by      = i.[Executed_by],
            id               = i.[Id],
            import_latency     = DATEDIFF(minute, i.[Instant],GETDATE()),
            instant          = i.[Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            is_expose        = i.[Is_Expose],
            message_text     = d.[Message],
            request_key      = i.[Request_Key],
            source_ip        = i.[Source],
            tenant_id        = i.[Tenant_Id],
            integration_type = i.[Type],
            tenant_name      = t.NAME
        FROM [dbo].[oslog_Integration] (nolock) i
            LEFT JOIN [dbo].[oslog_Int_Detail_0] (nolock) d ON i.Id = d.Id
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON i.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON i.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Integration"
  }
}
input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            id               = mr.[Id],
            import_latency     = DATEDIFF(minute, mr.[Instant],GETDATE()),
            instant          = mr.[Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            espace_id        = mr.[Espace_Id],
            tenant_id        = mr.[Tenant_Id],
            screen_name      = mr.[Screen],
            endpoint_name    = mr.[Endpoint],
            source_ip        = mr.[Source],
            duration         = mr.[Duration],
            executed_by      = mr.[Executed_by],
            error_id         = mr.[Error_Id],
            request_key      = mr.[Request_Key],
            login_id         = mr.[Login_Id],
            user_id          = mr.[User_Id],
            espace_name      = xe.[NAME],
            application_name = xa.[NAME],
            application_key  = xa.[KEY],
            tenant_name      = t.NAME,
            message_text     = md.[Message],
            detail_text      = md.[Detail],
            detail_label     = md.[DetailLabel]
        FROM
            [dbo].[oslog_mobile_request] (nolock) mr
            LEFT JOIN [dbo].[oslog_MR_Detail] (nolock) md ON mr.Id = md.Id
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON mr.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON mr.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Mobile Request"
  }
}
input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            application_key    = re.[APPLICATIONKEY],
            application_name   = re.[APPLICATIONNAME],
            import_latency     = DATEDIFF(minute, re.[Instant],GETDATE()),
            instant            = re.[INSTANT],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            module_key         = re.[MODULEKEY],
            module_name        = re.[MODULENAME],
            request_key        = re.[REQUESTKEY],
            request_event_name = re.[REQUESTEVENTNAME],
            event_details      = re.[EVENTDETAILS]
        FROM
            [dbo].[oslog_RequestEvent] (nolock) re
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Request Event"
  }
}

input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            application_key  = xa.[KEY],
            application_name = xa.[NAME],
            cyclic_job_key   = c.[Cyclic_Job_Key],
            cyclic_job_name  = xmc.[NAME],
            duration         = c.[Duration],
            espace_id        = c.[Espace_Id],
            espace_name      = xe.[NAME],
            error_id         = c.[Error_Id],
            executed_by      = c.[Executed_By],
            import_latency   = DATEDIFF(minute,c.[Instant],GETDATE()),
            instant          = c.[Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            last_run         = c.[Should_Have_Run_At],
            next_run         = c.[Next_Run],
            request_key      = c.[Request_Key],
            tenant_id        = c.[Tenant_Id],
            tenant_name      = t.NAME
        FROM [dbo].[oslog_Cyclic_Job] (nolock) c
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON c.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON c.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
            LEFT JOIN [dbo].[ossys_Cyclic_Job] (nolock) xcc ON c.[Cyclic_Job_Key]=xcc.[ID]
            LEFT JOIN [dbo].[ossys_Meta_Cyclic_Job] (nolock) xmc ON c.[Cyclic_Job_Key]=xmc.[SS_KEY]
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Timer"
  }
}
input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            import_latency = DATEDIFF(minute,w.[Instant],GETDATE()),
            instant        = w.[Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            duration       = w.[Duration],
            [url]          = w.[URL],
            method_name    = w.[Method],
            espace_id      = w.[Espace_Id],
            tenant_id      = w.[Tenant_Id],
            executed_by    = w.[Executed_by],
            error_id       = w.[Error_Id],
            integr_log_id  = w.[IntegrationLog_Id],
            tenant_name    = t.NAME
        FROM [dbo].[oslog_Web_Reference] (nolock) w
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON w.Tenant_Id = t.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Web Reference"
  }
}
input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            access_mode      = s.[Access_Mode],
            action_name      = s.[Action_Name],
            application_key  = xa.[KEY],
            application_name = xa.[NAME],
            duration         = s.[Duration],
            espace_id        = s.[Espace_Id],
            espace_name      = xe.[NAME],
            executed_by      = s.[Executed_By],
            import_latency = DATEDIFF(minute,s.[Instant],GETDATE()),
            instant          = s.[Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            msisdn           = s.[Msisdn],
            screen_name      = s.[Screen],
            screen_type      = s.[Screen_Type],
            session_bytes    = s.[Session_Bytes],
            session_id       = s.[Session_Id],
            session_requests = s.[Session_Requests],
            tenant_id        = s.[Tenant_Id],
            tenant_name      = t.NAME,
            user_id          = s.[User_Id],
            viewstate_size   = s.[Viewstate_Bytes],
            request_key      = s.[Request_Key],
            client_ip        = s.[Client_IP]
        FROM [dbo].[oslog_Screen] (nolock) s
            LEFT JOIN [dbo].[ossys_Tenant] (nolock) t ON s.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON s.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Web Request"
  }
}
input {
  jdbc {

    jdbc_driver_library => "${JDBC_LIBRARY}"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => nil

    jdbc_paging_enabled => true
    tracking_column => "${JDBC_TRACK_COLUMN}"
    use_column_value => true
    tracking_column_type => "numeric"

    schedule => "${JDBC_SCHEDULE}"
    #----------------------------------
    statement => "
        SELECT
            application_key  = xa.[KEY],
            application_name = xa.[NAME],
            client_ip       = w.[Client_IP],
            duration         = w.[Duration],
            error_id        = w.[Error_Id],
            espace_id        = w.[Espace_Id],
            espace_name      = xe.[NAME],
            executed_by     = w.[Executed_by],
            import_latency   = DATEDIFF(minute,w.[Instant],GETDATE()),
            instant          = w.[Instant],
            instant_unix     = DATEDIFF(SECOND,'1970-01-01', instant),
            method_name     = w.[Method],
            tenant_id       = w.[Tenant_Id],
            tenant_name     = t.NAME,
            webservice_name = w.[Name]
        FROM [dbo].[oslog_Web_Service] (nolock) w
            LEFT JOIN dbo.ossys_Tenant (nolock) t ON w.Tenant_Id = t.ID
            LEFT JOIN [dbo].[ossys_Espace] (nolock) xe ON w.espace_id = xe.ID
            LEFT JOIN [dbo].[OSSYS_MODULE] (nolock) xm ON xe.ID=xm.espace_id
            LEFT JOIN [dbo].[OSSYS_APP_DEFINITION_MODULE] (nolock) xad ON xm.ID=xad.module_id
            LEFT JOIN [dbo].[OSSYS_APPLICATION] (nolock) xa ON xad.application_id=xa.ID
        WHERE DATEDIFF(SECOND,'1970-01-01', instant) > :sql_last_value
        ORDER BY DATEDIFF(SECOND,'1970-01-01', instant)
    "
    type => "Web Service"
  }
}

filter {
  #------------------------------------------------------------------------------#
  # Common part
  #------------------------------------------------------------------------------#
  mutate {
    add_field => { "customer_name" => "${DATA_CUSTOMER_NAME}" }
    add_field => { "location_name" => "${DATA_LOCATION_NAME}" }
    add_field => { "environment_name" => "${DATA_ENVIRONMENT_NAME}" }
  }

  #------------------------------------------------------------------------------#
  # Module: Error
  #------------------------------------------------------------------------------#
  if [type] == "Error"{
    fingerprint
    {
      source => ["[id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Error" }
      add_field => { "message_type" => "Error"}
      #add_field => { "user_name" => "No User"}
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Extension
  #------------------------------------------------------------------------------#
  if [type] == "Extension"{
    fingerprint
    {
      source => ["[instant]", "[session_id]", "[request_key]", "[extension_id]", "[action_name]", "[espace_id]", "[tenant_id]", "[duration]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Extension" }
      add_field => { "message_type" => "Information"}
      #add_field => { "user_name" => "No User"}

      rename => { "[should_have_run_at]"   => "last_run"  }
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: General
  #------------------------------------------------------------------------------#
  if [type] == "General"{
    fingerprint
    {
      source => ["[request_key]", "[instant]", "[message_text]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "General" }
      add_field => { "message_type" => "Information" }
      #add_field => { "user_name" => "No User" }
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message_text" => "%{MESSAGE_OBJECT:message_object}" }
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message_object" => "%{MESSAGE_OBJECT_2:message_object}" }
      overwrite => ["message_object"]
    }

    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message_text" => "%{MESSAGE_DURATION:message_duration}" }
    }

    mutate {
      convert => { "message_duration" => "integer" }
    }

    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message_text" => "%{MESSAGE_DURATION_CUSTOM:message_duration_custom}" }
    }

    mutate {
      convert => { "message_duration_custom" => "integer" }
    }

  }

  #------------------------------------------------------------------------------#
  # Module: Integration
  #------------------------------------------------------------------------------#
  if [type] == "Integration"{
    fingerprint
    {
      source => ["[id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Integration" }
      add_field => { "message_type" => "Information"}
      #add_field => { "user_name" => "No User"}
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Mobile Request
  #------------------------------------------------------------------------------#
  if [type] == "Mobile Request"{
    fingerprint
    {
      source => ["[id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Mobile Request" }
      add_field => { "message_type" => "Information"}
      #add_field => { "user_name" => "No User"}
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Request Event
  #------------------------------------------------------------------------------#
  json {
    source => "event_details"
  }
  if [type] == "Request Event"{

    #----------------------------------------------------------------------------#
    # create the document id
    #----------------------------------------------------------------------------#
    fingerprint
    {
      source => ["[instant]", "[application_key]", "[request_key]", "[module_key]", "[request_event_name]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      #-----------------------------#
      # New fields
      #-----------------------------#
      add_field => { "monitoring_data_type" => "Request Event" }
      add_field => { "message_type" => "Information"}
    }

    mutate
    {
      #-----------------------------#
      # Common Request fields
      #-----------------------------#
      rename => { "[AK]"   => "action_key"  }
      rename => { "[AN]"   => "action_name"  }
      rename => { "[EK]"   => "environment_key"  }
      rename => { "[EN]"   => "environment_name"  }
      rename => { "[EPK]"  => "endpoint_key"  }
      rename => { "[EPN]"  => "endpoint_name"  }
      rename => { "[TK]"   => "tenant_key"  }
      rename => { "[TN]"   => "tenant_name"  }
      rename => { "[FN]"   => "frontend_name"  }
    }

    #----------------------------------------------------------------------------#
    # Generate fields according to request type:
    #
    # WebScreenClientExecuted;
    # WebScreenServerExecuted;
    # QueryExecuted;
    # ConsumedIntegrationExecuted;
    # ExtensionExecuted.
    #
    #----------------------------------------------------------------------------#
    if [request_event_name] == "WebScreenClientExecuted"
    {
      mutate
      {
        # WebScreenClientExecuted

        rename => { "[VK]"     => "visitor_key"  }
        rename => { "[ViK]"    => "visit_key"  }
        rename => { "[SK]"     => "session_key"  }
        rename => { "[SR]"     => "screen_resolution"  }
        rename => { "[UK]"     => "user_key"  }
        rename => { "[UA]"     => "user_agent"  }
        rename => { "[D]"      => "total_duration"  }
        rename => { "[LT]"     => "load_time"  }
        rename => { "[TTFB]"   => "time_to_first_byte"  }
        rename => { "[TTLB]"   => "time_to_last_byte"  }
        rename => { "[DMan]"   => "device_manufacturer"  }
        rename => { "[DMod]"   => "device_model"  }
        rename => { "[DPlat]"  => "device_platform"  }
        rename => { "[DPlatV]" => "device_platform_version"  }
        rename => { "[NT]"     => "network_type"  }
        rename => { "[CN]"     => "carrier_name"  }
        rename => { "[CCC]"    => "client_country_code"  }
        rename => { "[CNT]"    => "carrier_network_type"  }

        convert => {
          "total_duration" => "integer"
          "time_to_first_byte" => "integer"
          "time_to_last_byte" => "integer"
        }
      }

      range {
        ranges => [
          "total_duration",    0,        2000, "field:total_duration_class:Good",
          "total_duration", 2001,        8000, "field:total_duration_class:Fair",
          "total_duration", 8001,999999999999, "field:total_duration_class:Bad"
        ]
      }
    }
    else if [request_event_name] == "WebScreenServerExecuted"
    {
      mutate{
        # WebScreenServerExecuted

        rename => { "[D]"    => "server_duration"  }
        rename => { "[TQT]"  => "total_query_time"  }
        rename => { "[TQE]"  => "total_query_executions"  }
        rename => { "[TET]"  => "total_extension_time"  }
        rename => { "[TEE]"  => "total_extension_executions"  }
        rename => { "[TCIT]" => "total_consumed_integration_time"  }
        rename => { "[TCIE]" => "total_consumed_integration_executions"  }
        rename => { "[IP]"   => "client_ip"  }
        rename => { "[SAT]"  => "session_acquisition_time"  }
        rename => { "[SS]"   => "session_size"  }
        rename => { "[VSS]"  => "viewstate_size"  }
        rename => { "[UID]"  => "user_id"  }

        convert => {
          "server_duration" => "integer"
          "total_query_time" => "integer"
          "total_query_executions" => "integer"
          "total_extension_time" => "integer"
          "total_extension_executions" => "integer"
          "total_consumed_integration_time" => "integer"
          "total_consumed_integration_executions" => "integer"
          "session_acquisition_time" => "integer"
          "session_size" => "integer"
          "viewstate_size" => "integer"
          "user_id" => "integer"
        }
      }

      range {
        ranges => [
          "server_duration",    0,        1500, "field:total_duration_class:Good",
          "server_duration", 1501,        2000, "field:total_duration_class:Fair",
          "server_duration", 2001,999999999999, "field:total_duration_class:Bad",

          "viewstate_size",     0,        5000, "field:viewstate_size_class:Good",
          "viewstate_size",  5001,       10000, "field:viewstate_size_class:Fair",
          "viewstate_size", 10001,999999999999, "field:viewstate_size_class:Bad",

          "session_size",    0,        4000, "field:session_size_class:Good",
          "session_size", 4001,        5000, "field:session_size_class:Fair",
          "session_size", 5001,999999999999, "field:session_size_class:Bad",

          "total_consumed_integration_time",   0,         200, "field:total_consumed_integration_time_class:Good",
          "total_consumed_integration_time", 201,999999999999, "field:total_consumed_integration_time_class:Bad",

          "total_extension_time",   0,         200, "field:total_extension_time_class:Good",
          "total_extension_time", 201,999999999999, "field:total_extension_time_class:Bad",

          "total_query_time",   0,         200, "field:total_query_time_class:Good",
          "total_query_time", 201,999999999999, "field:total_query_time_class:Bad"
        ]
      }
    }
    else if [request_event_name] == "QueryExecuted"
    {
      mutate
      {
        # QueryExecuted

        rename => { "[D]"    => "query_duration"  }
        rename => { "[OK]"   => "object_key"  }
        rename => { "[ON]"   => "object_name"  }
        rename => { "[NE]"   => "number_of_executions"  }
        rename => { "[OEK]"  => "object_espace_key"  }
        rename => { "[OEN]"  => "object_espace_name"  }

        convert => {
          "query_duration" => "integer"
          "number_of_executions" => "integer"
        }
      }
    }
    else if [request_event_name] == "ConsumedIntegrationExecuted"
    {
      mutate
      {
        # ConsumedIntegrationExecuted

        rename => { "[D]"    => "integration_duration"  }
        rename => { "[OK]"   => "object_key"  }
        rename => { "[ON]"   => "object_name"  }
        rename => { "[OEK]"  => "object_espace_key"  }
        rename => { "[OEN]"  => "object_espace_name"  }
        rename => { "[NE]"   => "number_of_executions"  }
        rename => { "[IT]"   => "integration_type"  }
        rename => { "[IE]"   => "integration_endpoint"  }

        convert => {
          "integration_duration" => "integer"
          "number_of_executions" => "integer"
        }
      }
    }
    else if [request_event_name] == "ExtensionExecuted"
    {
      mutate
      {
        # ExtensionExecuted

        rename => { "[D]"    => "extension_duration"  }
        rename => { "[OK]"   => "object_key"  }
        rename => { "[ON]"   => "object_name"  }
        rename => { "[OEK]"  => "object_espace_key"  }
        rename => { "[OEN]"  => "object_espace_name"  }
        rename => { "[NE]"   => "number_of_executions"  }

        convert => {
          "extension_duration" => "integer"
          "number_of_executions" => "integer"
        }
      }
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Timer
  #------------------------------------------------------------------------------#
  if [type] == "Timer"{
    fingerprint
    {
      source => ["[request_key]", "[instant]", "[cyclic_job_key]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Timer" }
      add_field => { "message_type" => "Information"}
      #add_field => { "user_name" => "No User"}
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Web Reference
  #------------------------------------------------------------------------------#
  if [type] == "Web Reference"{
    fingerprint
    {
      source => ["[instant]", "[duration]", "[url]", "[method_name]", "[espace_id]", "[tenant_id]", "[integr_log_id]", "[error_id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Web Reference" }
      add_field => { "message_type" => "Information"}
      #add_field => { "user_name" => "No User"}
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Web Request
  #------------------------------------------------------------------------------#
  if [type] == "Web Request"{
    fingerprint
    {
      source => ["[request_key]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Web Request" }
      add_field => { "message_type" => "Request"}
      #add_field => { "user_name" => "No User"}
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Web Service
  #------------------------------------------------------------------------------#
  if [type] == "Web Service"{
    fingerprint
    {
      source => ["[instant]", "[duration]", "[webservice_name]", "[method_name]", "[espace_id]", "[tenant_id]", "[client_ip]", "[executed_by]", "[error_id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "monitoring_data_type" => "Web Service" }
      add_field => { "message_type" => "Request"}
      #add_field => { "user_name" => "No User"}
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }
}

output {
  if [type] == "Error"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_error-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Extension"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_extension-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "General"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_general-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Integration"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_integration-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Mobile Request"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_mobile_request-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Request Event"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_request_event-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }

  if [type] == "Timer"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_timer-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Web Reference"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_web_reference-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Web Request"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_web_request-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Web Service"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_web_service-%{+yyyy.ww}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
}
