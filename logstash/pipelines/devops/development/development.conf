input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/error.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [application.action_name]     = CASE WHEN e.[Action_Name]='' THEN 'No Action' ELSE e.[Action_Name] END,
            [application.key]             = e.[Application_Key],
            [application.name]            = e.[Application_Name],
            [application.entrypoint_name] = e.[Entrypoint_Name],
            [environment_information]     = e.[EnvironmentInformation],
            [message.text]                = e.[Message],
            [application.espace_id]       = e.[Espace_Id],
            [application.espace_name]     = e.[Espace_Name],
            [error_id]                    = e.[id],
            [import.latency]              = DATEDIFF(minute,e.[Instant],GETDATE()),
            instant = e.[Instant], 
            [application.module_name]     = e.[Module_Name],
            [request.key]                 = e.[Request_Key],
            server_name                   = e.[Server],
            [session.id]                  = e.[Session_Id],
            [message.stack_trace]         = SUBSTRING(e.[Stack], 1, 8191),
            tenant_id                     = e.[Tenant_Id],
            user_id                       = e.[User_Id],
            user_name                     = e.username
        FROM CSDEVOPS11DEV_LOG.[dbo].[oslog_Error] (nolock) e
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Error"
  }
}

input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/extension.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [application.action_name] = e.[Action_Name],
            [application.key]         = e.[Application_Key],
            [application.name]        = e.[Application_Name],
            instant = e.[Instant],
            duration                  = e.[Duration],
            [import.latency]          = DATEDIFF(minute,e.[Instant],GETDATE()),
            [session.id]              = e.[Session_Id],
            [user_id]                 = e.[User_Id],
            [user_name]               = e.username,
            [application.espace_id]   = e.[Espace_Id],
            [tenant_id]               = e.[Tenant_Id],
            extension_id              = e.[Extension_Id],
            [application.executor]    = e.[Executed_By],
            error_id                  = e.[Error_Id],
            [request.key]             = e.[Request_Key],
            [application.espace_name] = e.[Espace_Name],
            extension_name            = e.[Extension_Name]
        FROM [dbo].[oslog_Extension] (nolock) e
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Extension"
  }
}
input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/general.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [application.action_name]     = g.[Action_Name],
            [application.key]             = g.[Application_Key],
            [application.name]            = g.[Application_Name],
            client_ip                     = g.[Client_IP],
            [application.entrypoint_name] = g.[Entrypoint_Name],
            error_id                      = g.[Error_Id],
            [application.espace_id]       = g.[Espace_Id],
            [application.espace_name]     = g.[Espace_Name],
            [import.latency]              = DATEDIFF(minute, g.[Instant],GETDATE()),
            instant = [Instant],
            [message.text]                = [Message],
			[message.type]                = [Message_Type],
            [application.module_name]     = [Module_Name],
            [request.key]                 = [Request_Key],
            [session.id]                  = [Session_Id],
            tenant_id                     = g.[Tenant_Id],
            user_id                       = [User_Id],
            user_name                     = g.username
        FROM [dbo].[oslog_General] (nolock) g
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "General"
  }
}
input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/integration.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [application.action_name]   = i.[Action],
            [application.key]           = i.[Application_Key],
            [application.name]          = i.[Application_Name],
            [integration.detail_link]   = d.[Detail],
            [integration.detail_label]  = d.[DetailLabel],
            duration                    = i.[Duration],
            [application.endpoint_name] = i.[Endpoint],
            error_id                    = i.[Error_Id],
            [application.espace_id]     = i.[Espace_Id],
            [application.espace_name]   = i.[Espace_Name],
            [integration.executor]      = i.[Executed_by],
            [integration.id]            = i.[Id],
            [import.latency]            = DATEDIFF(minute, i.[Instant],GETDATE()),
            instant                     = i.[Instant],
            [integration.expose]        = i.[Is_Expose],
            [integration.type]          = i.[Type],
            [message.text]              = d.[Message],
            [request.key]               = i.[Request_Key],
            [application.client_ip]     = i.[Source],
            tenant_id                   = i.[Tenant_Id]
        FROM [dbo].[oslog_Integration] (nolock) i
            LEFT JOIN [dbo].[oslog_Int_Detail_0] (nolock) d ON i.Id = d.Id
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Integration"
  }
}
input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/mobile.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [mobile_request.id]           = mr.[Id],
            [import.latency]              = DATEDIFF(minute, mr.[Instant],GETDATE()),
            instant                       = mr.[Instant],
            [application.espace_id]       = mr.[Espace_Id],
            tenant_id                     = mr.[Tenant_Id],
            [application.screen_name]     = mr.[Screen],
            [application.endpoint_name]   = mr.[Endpoint],
            [application.client_ip]       = mr.[Source],
            duration                      = mr.[Duration],
            [application.executor]        = mr.[Executed_by],
            error_id                      = mr.[Error_Id],
            [request.key]                 = mr.[Request_Key],
            login_id                      = mr.[Login_Id],
            user_id                       = mr.[User_Id],
            user_name                     = mr.Username,
            [application.espace_name]     = mr.[Espace_Name],
            [application.name]            = mr.[Application_Name],
            [application.key]             = mr.[Application_Key],
            [message.text]                = md.[Message],
            [mobile_request.detail_link]  = md.[Detail],
            [mobile_request.detail_label] = md.[DetailLabel]
        FROM
            [dbo].[oslog_mobile_request] (nolock) mr
            LEFT JOIN [dbo].[oslog_MR_Detail] (nolock) md ON mr.Id = md.Id
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Mobile Request"
  }
}
input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/request_event.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [application.key]         = re.[APPLICATIONKEY],
            [application.name]        = re.[APPLICATIONNAME],
            [import.latency]          = DATEDIFF(minute, re.[Instant],GETDATE()),
            instant                   = re.[INSTANT],
            [application.module_key]  = re.[MODULEKEY],
            [application.module_name] = re.[MODULENAME],
            [request.key]             = re.[REQUESTKEY],
            [request.event_name]      = re.[REQUESTEVENTNAME],
            [request.event_detail]    = re.[EVENTDETAILS]
        FROM
            [dbo].[oslog_RequestEvent] (nolock) re
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Request Event"
  }
}

input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/timer.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [application.key]         = c.[Application_Key],
            [application.name]        = c.[Application_Name],
            [timer.job_key]           = c.[Cyclic_Job_Key],
            [timer.job_name]          = c.[Cyclic_Job_Name],
            [duration]                = c.[Duration],
            [application.espace_id]   = c.[Espace_Id],
            [application.espace_name] = c.[Espace_Name],
            [error_id]                = c.[Error_Id],
            [timer.executor]          = c.[Executed_By],
            [import.latency]          = DATEDIFF(minute,c.[Instant],GETDATE()),
            [instant]                 = c.[Instant],
            [timer.last_run]          = c.[Should_Have_Run_At],
            [timer.next_run]          = c.[Next_Run],
            [request.key]             = c.[Request_Key],
            [tenant_id ]              = c.[Tenant_Id]
        FROM [dbo].[oslog_Cyclic_Job] (nolock) c
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Timer"
  }
}
input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/web_reference.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [import.latency]          = DATEDIFF(minute,w.[Instant],GETDATE()),
            instant                   = w.[Instant],
            duration                  = w.[Duration],
            [web_reference.url]       = w.[URL],
            [application.method_name] = w.[Method],
            [application.espace_id]   = w.[Espace_Id],
            tenant_id                 = w.[Tenant_Id],
            [application.executor]    = w.[Executed_by],
            error_id                  = w.[Error_Id],
            [integration.id]          = w.[IntegrationLog_Id]
        FROM [dbo].[oslog_Web_Reference] (nolock) w
            LEFT JOIN CSDEVOPS11DEV.[dbo].[ossys_Tenant] (nolock) t ON w.Tenant_Id = t.ID
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Web Reference"
  }
}
input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/web_request.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [web_request.access_mode] = s.[Access_Mode],
            [application.action_name] = s.[Action_Name],
            [application.key]         = s.[Application_Key],
            [application.name]        = s.[Application_Name],
            duration                  = s.[Duration],
            [application.espace_id]   = s.[Espace_Id],
            [application.espace_name] = s.[Espace_Name],
            [application.executor]    = s.[Executed_By],
            [import.latency]          = DATEDIFF(minute,s.[Instant],GETDATE()),
            instant                   = s.[Instant],
            [web_request.msisdn]      = s.[Msisdn],
            [application.screen_name] = s.[Screen],
            [application.screen_type] = s.[Screen_Type],
            [session.size]            = s.[Session_Bytes],
            [session.id]              = s.[Session_Id],
            [session.requests]        = s.[Session_Requests],
            tenant_id                 = s.[Tenant_Id],
            user_id                   = s.[User_Id],
            user_name                 = s.Username,
            [request.viewstate_size]  = s.[Viewstate_Bytes],
            [request.key]             = s.[Request_Key],
            [application.client_ip]   = s.[Client_IP]
        FROM [dbo].[oslog_Screen] (nolock) s
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Web Request"
  }
}
input {
  jdbc {

    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
    jdbc_user => nil
    last_run_metadata_path => "/etc/logstash/pipelines/devops/development/web_service.last_run"
    schedule => "*/5 * * * *"

    jdbc_paging_enabled => true
    tracking_column => "instant_unix"
    use_column_value => true
    tracking_column_type => "numeric"

    statement => "
        SELECT
            [instant_unix]            = DATEDIFF(SECOND,'2020-01-01', instant),
            [application.client_ip]   = w.[Client_IP],
            duration                  = w.[Duration],
            error_id                  = w.[Error_Id],
            [application.espace_id]   = w.[Espace_Id],
            [application.executor]    = w.[Executed_by],
            [import.latency]          = DATEDIFF(minute,w.[Instant],GETDATE()),
            instant                   = w.[Instant],
            [application.method_name] = w.[Method],
            tenant_id                 = w.[Tenant_Id],
            [web_service.name]        = w.[Name]
        FROM [dbo].[oslog_Web_Service] (nolock) w
        WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
    "
    type => "Web Service"
  }
}

filter {
  #------------------------------------------------------------------------------#
  # Common part
  #------------------------------------------------------------------------------#
  mutate {
    add_field => { "outsystems.customer_name" => "DevOps" }
    add_field => { "outsystems.location_name" => "Linda-a-Velha" }
    add_field => { "outsystems.environment_name" => "Development" }
  }

  #------------------------------------------------------------------------------#
  # Module: Error
  #------------------------------------------------------------------------------#
  if [type] == "Error"{
    fingerprint
    {
      source => ["[error_id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "Error" }
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Extension
  #------------------------------------------------------------------------------#
  if [type] == "Extension"{
    fingerprint
    {
      source => ["[instant]", "[session.id]", "[request.key]", "[extension_id]", "[application.action_name]", "[application.espace_id]", "[tenant_id]", "[duration]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "Extension" }
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: General
  #------------------------------------------------------------------------------#
  if [type] == "General"{
    fingerprint
    {
      source => ["[request.key]", "[instant]", "[message.text]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "General" }
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message.text" => "%{MESSAGE_OBJECT:message.object}" }
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message.object" => "%{MESSAGE_OBJECT_2:message.object}" }
      overwrite => ["message.object"]
    }

    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message.text" => "%{MESSAGE_DURATION:message.duration}" }
    }

    mutate {
      convert => { "message.duration" => "integer" }
    }

    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message.text" => "%{MESSAGE_DURATION_CUSTOM:message.duration_custom}" }
    }

    mutate {
      convert => { "message.duration_custom" => "integer" }
    }

  }

  #------------------------------------------------------------------------------#
  # Module: Integration
  #------------------------------------------------------------------------------#
  if [type] == "Integration"{
    fingerprint
    {
      source => ["[integration.id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "Integration" }
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Mobile Request
  #------------------------------------------------------------------------------#
  if [type] == "Mobile Request"{
    fingerprint
    {
      source => ["[mobile_request.id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "Mobile Request" }
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Request Event
  #------------------------------------------------------------------------------#
  json {
    source => "event_details"
  }
  if [type] == "Request Event"{

    #----------------------------------------------------------------------------#
    # create the document id
    #----------------------------------------------------------------------------#
    fingerprint
    {
      source => ["[instant]", "[application.key]", "[request.key]", "[application.module_key]", "[request.event_name]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      #-----------------------------#
      # New fields
      #-----------------------------#
      add_field => { "log.data_source" => "Request Event" }
    }

    mutate
    {
      #-----------------------------#
      # Common Request fields
      #-----------------------------#
      rename => { "[AK]"   => "application.action_key"  }
      rename => { "[AN]"   => "application.action_name"  }
      rename => { "[EK]"   => "application.environment.key"  }
      rename => { "[EN]"   => "application.environment.name"  }
      rename => { "[EPK]"  => "application.endpoint_key"  }
      rename => { "[EPN]"  => "application.endpoint_name"  }
      rename => { "[TK]"   => "application.tenant_key"  }
      rename => { "[TN]"   => "application.tenant_name"  }
      rename => { "[FN]"   => "application.frontend_name"  }
    }

    #----------------------------------------------------------------------------#
    # Generate fields according to request type:
    #
    # WebScreenClientExecuted;
    # WebScreenServerExecuted;
    # QueryExecuted;
    # ConsumedIntegrationExecuted;
    # ExtensionExecuted.
    #
    #----------------------------------------------------------------------------#
    if [request_event_name] == "WebScreenClientExecuted"
    {

      mutate
      {
        # WebScreenClientExecuted
        add_field => { "request_event.group" => "Client"}

        rename => { "[VK]"     => "session.visitor_key"  }
        rename => { "[ViK]"    => "session.visit_key"  }
        rename => { "[SK]"     => "session.key"  }
        rename => { "[SR]"     => "application.screen_resolution"  }
        rename => { "[UK]"     => "user_key"  }
        rename => { "[UA]"     => "user_agent"  }

        #copy => { "[LT]"      => "group_duration"  }
        rename => { "[D]"      => "request.total_duration"  }

        rename => { "[LT]"     => "request.load_time"  }
        rename => { "[TTFB]"   => "request.time_to_first_byte"  }
        rename => { "[TTLB]"   => "request.time_to_last_byte"  }
        rename => { "[DMan]"   => "device.manufacturer"  }
        rename => { "[DMod]"   => "device.model"  }
        rename => { "[DPlat]"  => "device.platform"  }
        rename => { "[DPlatV]" => "device.platform_version"  }
        rename => { "[NT]"     => "network_type"  }
        rename => { "[CN]"     => "carrier_name"  }
        rename => { "[CCC]"    => "client_country_code"  }
        rename => { "[CNT]"    => "carrier_network_type"  }

        convert => {
          "request.load_time" => "integer"

          "request.total_duration" => "integer"
          "request.time_to_first_byte" => "integer"
          "request.time_to_last_byte" => "integer"
        }
      }
      if [request.time_to_first_byte] and [request.time_to_last_byte] {
        ruby {            
          code => "event['request.network_time'] = event['request.time_to_last_byte'] - event['request.time_to_first_byte']"      
        }    
      }

      if [request.load_time] and [request.network_time] {
        ruby {            
          code => "event['request.client_time'] = event['request.load_time'] - event['request.network_time']"      
        }    
      }

      if [request.load_time] and [request.total_duration] {
        ruby {            
          code => "event['request.estimated_server_time'] = event['request.total_duration'] - event['request.load_time']"      
        }    
      }

      if [request.load_time] {
        ruby {            
          code => "event['group_duration'] = event['request.load_time']"      
        }    
      }

      range {
        ranges => [
          "request.total_duration",    0,        2000, "field:request.total_duration_class:Good",
          "request.total_duration", 2001,        8000, "field:request.total_duration_class:Fair",
          "request.total_duration", 8001,999999999999, "field:request.total_duration_class:Bad"
        ]
      }
    }
    else if [request_event_name] == "WebScreenServerExecuted"
    {
      mutate{
        # WebScreenServerExecuted

        add_field => { "request_event.group" => "Server"}

        rename => { "[D]"    => "request.server_duration"  }
        rename => { "[TQT]"  => "request.total_query_time"  }
        rename => { "[TQE]"  => "request.total_query_executions"  }
        rename => { "[TET]"  => "request.total_extension_time"  }
        rename => { "[TEE]"  => "request.total_extension_executions"  }
        rename => { "[TCIT]" => "request.total_consumed_integration_time"  }
        rename => { "[TCIE]" => "request.total_consumed_integration_executions"  }
        rename => { "[IP]"   => "application.client_ip"  }
        rename => { "[SAT]"  => "session.acquisition_time"  }
        rename => { "[SS]"   => "session.size"  }
        rename => { "[VSS]"  => "session.viewstate_size"  }
        rename => { "[UID]"  => "user_id"  }

        convert => {
          "request.server_duration" => "integer"
          "request.total_query_time" => "integer"
          "request.total_query_executions" => "integer"
          "request.total_extension_time" => "integer"
          "request.total_extension_executions" => "integer"
          "request.total_consumed_integration_time" => "integer"
          "request.total_consumed_integration_executions" => "integer"
          "session.acquisition_time" => "integer"
          "session.size" => "integer"
          "session.viewstate_size" => "integer"
          "user_id" => "integer"
        }
      }

      if [request.server_duration] {
        ruby {            
          code => "event['group_duration'] = event['request.server_duration']"      
        }    
      }
	  
      range {
        ranges => [
          "request.server_duration",    0,        1500, "field:request.total_duration_class:Good",
          "request.server_duration", 1501,        2000, "field:request.total_duration_class:Fair",
          "request.server_duration", 2001,999999999999, "field:request.total_duration_class:Bad",

          "session.viewstate_size",     0,        5000, "field:session.viewstate_size_class:Good",
          "session.viewstate_size",  5001,       10000, "field:session.viewstate_size_class:Fair",
          "session.viewstate_size", 10001,999999999999, "field:session.viewstate_size_class:Bad",

          "session.size",    0,        4000, "field:session.size_class:Good",
          "session.size", 4001,        5000, "field:session.size_class:Fair",
          "session.size", 5001,999999999999, "field:session.size_class:Bad",

          "request.total_consumed_integration_time",   0,         200, "field:request.total_consumed_integration_time_class:Good",
          "request.total_consumed_integration_time", 201,999999999999, "field:request.total_consumed_integration_time_class:Bad",

          "request.total_extension_time",   0,         200, "field:request.total_extension_time_class:Good",
          "request.total_extension_time", 201,999999999999, "field:request.total_extension_time_class:Bad",

          "request.total_query_time",   0,         200, "field:request.total_query_time_class:Good",
          "request.total_query_time", 201,999999999999, "field:request.total_query_time_class:Bad"
        ]
      }
    }
    else if [request_event_name] == "QueryExecuted"
    {
      mutate
      {
        # QueryExecuted
        add_field => { "request_event.group" => "Server"}
        add_field => { "request_event.subgroup" => "Query"}

        copy => { "[D]"      => "subgroup_duration"  }
        rename => { "[D]"    => "duration"  }
        rename => { "[OK]"   => "request.object_key"  }
        rename => { "[ON]"   => "request.object_name"  }
        rename => { "[NE]"   => "request.number_of_executions"  }
        rename => { "[OEK]"  => "request.object_espace_key"  }
        rename => { "[OEN]"  => "request.object_espace_name"  }

        convert => {
          "query_duration" => "integer"
          "request.number_of_executions" => "integer"
        }
      }
		
      if [duration] {
        ruby {            
          code => "event['subgroup_duration'] = event['duration']"      
        }    
      }	  
    }
    else if [request_event_name] == "ConsumedIntegrationExecuted"
    {
      mutate
      {
        # ConsumedIntegrationExecuted
        add_field => { "request_event.group" => "Server"}
        add_field => { "request_event.subgroup" => "Integration"}

        rename => { "[D]"    => "duration"  }
        rename => { "[OK]"   => "request.object_key"  }
        rename => { "[ON]"   => "request.object_name"  }
        rename => { "[OEK]"  => "request.object_espace_key"  }
        rename => { "[OEN]"  => "request.object_espace_name"  }
        rename => { "[NE]"   => "request.number_of_executions"  }
        rename => { "[IT]"   => "integration.type"  }
        rename => { "[IE]"   => "integration.endpoint"  }

        convert => {
          "integration.duration" => "integer"
          "request.number_of_executions" => "integer"
        }
      }
      if [duration] {
        ruby {            
          code => "event['subgroup_duration'] = event['duration']"      
        }    
      }
    }
    else if [request_event_name] == "ExtensionExecuted"
    {
      mutate
      {
        # ExtensionExecuted
        add_field => { "request_event.group" => "Server"}
        add_field => { "request_event.subgroup" => "Extension"}

        rename => { "[D]"    => "duration"  }
        rename => { "[OK]"   => "request.object_key"  }
        rename => { "[ON]"   => "request.object_name"  }
        rename => { "[OEK]"  => "request.object_espace_key"  }
        rename => { "[OEN]"  => "request.object_espace_name"  }
        rename => { "[NE]"   => "request.number_of_executions"  }

        convert => {
          "subgroup_duration" => "integer"
          "extension_duration" => "integer"
          "extension.number_of_executions" => "integer"
        }
      }
      if [duration] {
        ruby {            
          code => "event['subgroup_duration'] = event['duration']"      
        }    
      }
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Timer
  #------------------------------------------------------------------------------#
  if [type] == "Timer"{
    fingerprint
    {
      source => ["[request.key]", "[instant]", "[timer.job_key]"]
      add_field => { "log.data_source" => "Timer" }

      add_field => { "request_event.group" => "Server"}
      add_field => { "request_event.subgroup" => "Logic"}
      add_field => { "request_event.logic_group" => "Timer"}
    }
    if [duration] {
      ruby {            
        code => "event['logic_duration'] = event['duration']"      
      }    
    }
    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Web Reference
  #------------------------------------------------------------------------------#
  if [type] == "Web Reference"{
    fingerprint
    {
      source => ["[instant]", "[duration]", "[web_reference.url]", "[application.method_name]", "[application.espace_id]", "[application.tenant_id]", "[integration.id]", "[error_id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "Web Reference" }
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Web Request
  #------------------------------------------------------------------------------#
  if [type] == "Web Request"{
    fingerprint
    {
      source => ["request.key"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "Web Request" }
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }

  #------------------------------------------------------------------------------#
  # Module: Web Service
  #------------------------------------------------------------------------------#
  if [type] == "Web Service"{
    fingerprint
    {
      source => ["[instant]", "[duration]", "[webservice.name]", "[application.method_name]", "[application.espace_id]", "[application.tenant_id]", "[application.client_ip]", "[web_service.executor]", "[error_id]"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
      concatenate_sources => true
    }

    mutate{
      add_field => { "log.data_source" => "Web Service" }
    }

    range {
      ranges => [
        "duration",    0,        2000, "field:duration_class:Good",
        "duration", 2001,        8000, "field:duration_class:Fair",
        "duration", 8001,999999999999, "field:duration_class:Bad"
      ]
    }
  }
}

output {
  if [type] == "Error"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_error"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Extension"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_extension"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "General"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_general"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Integration"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_integration"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Mobile Request"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_mobile_request"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Request Event"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_request_event"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }

  if [type] == "Timer"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_timer"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Web Reference"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_web_reference"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Web Request"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_web_request"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
  if [type] == "Web Service"{
    elasticsearch {
      hosts => "localhost:9200"
      index => "os_mon_log_web_service"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }
}
