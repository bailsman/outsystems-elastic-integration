input {
    jdbc {
        jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
        jdbc_connection_string => "jdbc:sqlserver://192.168.159.78:1433;database=CSDEVOPS11DEV_LOG;user=usrElastic;password=pwdElastic;loginTimeout=30;"
        jdbc_user => nil
        last_run_metadata_path => "/etc/logstash/pipelines/devops/development/timer.last_run"
        schedule => "*/5 * * * *"

        jdbc_paging_enabled => true
        tracking_column => "instant_unix"
        use_column_value => true
        tracking_column_type => "numeric"

        statement => "
            SELECT
                instant_unix            = DATEDIFF(SECOND,'2020-01-01', instant),
                application_key         = c.[Application_Key],
                application_name        = c.[Application_Name],
                timer_job_key           = c.[Cyclic_Job_Key],
                timer_job_name          = c.[Cyclic_Job_Name],
                duration                = c.[Duration],
                application_espace_id   = c.[Espace_Id],
                application_espace_name = c.[Espace_Name],
                error_id                = c.[Error_Id],
                timer_executor          = c.[Executed_By],
                import_latency          = DATEDIFF(minute,c.[Instant],GETDATE()),
                instant                 = c.[Instant],
                timer_last_run          = c.[Should_Have_Run_At],
                timer_next_run          = c.[Next_Run],
                request_key             = c.[Request_Key],
                tenant_id               = c.[Tenant_Id]
            FROM [dbo].[oslog_Cyclic_Job] (nolock) c
            WHERE DATEDIFF(SECOND,'2020-01-01', instant) > :sql_last_value
        "
    }
}

filter {
    #------------------------------------------------------------------------------#
    # Common part
    #------------------------------------------------------------------------------#
    mutate {
        add_field => {
            "[ecs][version]" => "1.5.0"
            "[outsystems][customer_name]" => "DevOps"
            "[outsystems][location_name]" => "Linda-a-Velha"
            "[outsystems][environment_name]" => "Development"
        }

        convert => [ "instant", "string" ] # we need to convert this to a string to be able to parse it into the @timestamp field

        remove_field => [ "instant_unix" ] # this field was only used for controling the query pagination, so we don't need to keep it
    }

    date {
        match => ["instant", "ISO8601"]
        timezone => "Etc/UTC"
    }

    mutate {
        rename => { "instant" => "[log][instant]" } # the value of this field is now in the @timestamp field, so we just keep it as a control value
    }

    #------------------------------------------------------------------------------#
    # Specific part
    #------------------------------------------------------------------------------#
    fingerprint {
        source => ["[request_key]", "[instant]", "[timer_job_key]"]
        target => "[@metadata][fingerprint]"
        method => "MURMUR3"
        concatenate_sources => true
    }

    range {
        ranges => [
                "duration",    0,        2000, "field:duration_class:Good",
                "duration", 2001,        8000, "field:duration_class:Fair",
                "duration", 8001,999999999999, "field:duration_class:Bad"
        ]
    }

    mutate {
        copy => { "duration" => "logic_duration" }

        add_field => {
            "[log][data_source]" => "Timer"
            "[request_event][group]" => "Server"
            "[request_event][subgroup]" => "Logic"
            "[request_event][logic_group]" => "Timer"
        }

        rename => {
            "application_key" => "[application][key]"
            "application_name" => "[application][name]"
            "application_espace_id" => "[application][espace_id]"
            "application_espace_name" => "[application][espace_name]"
            "timer_job_key" => "[timer][job_key]"
            "timer_job_name" => "[timer][job_name]"
            "timer_executor" => "[timer][executor]"
            "timer_last_run" => "[timer][last_run]"
            "timer_next_run" => "[timer][next_run]"
            "import_latency" => "[import][latency]"
            "request_key" => "[request][key]"
        }
    }
}

output {
    elasticsearch {
        hosts => "localhost:9200"
        document_id => "%{[@metadata][fingerprint]}"
        ilm_enabled => true
        ilm_rollover_alias => "os-mon-log-timer"
        ilm_pattern => "000001"
        ilm_policy => "os-mon-log-ilm-policy"
    }
}
